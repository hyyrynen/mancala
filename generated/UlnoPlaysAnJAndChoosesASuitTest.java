/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;


public class UlnoPlaysAnJAndChoosesASuitTest extends TestCase
{



   /**
    * <pre>
    *           0..1     object_Artjom     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Player
    *           test               Artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "Artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.Artjom != value)
      {
      
         Player oldValue = this.Artjom;
         this.Artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public UlnoPlaysAnJAndChoosesASuitTest withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.Artjom;
   }

   /**
    * <pre>
    *           0..1     object_C10     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               C10
    * </pre>
    */
   public static final String PROPERTY_C10 = "C10";

   @Property( name = PROPERTY_C10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C10;

   @Property( name = PROPERTY_C10 )
   public boolean setC10 (Card value)
   {
      boolean changed = false;

      if (this.C10 != value)
      {
      
         Card oldValue = this.C10;
         this.C10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C10 )
   public UlnoPlaysAnJAndChoosesASuitTest withC10 (Card value)
   {
      setC10 (value);
      return this;
   }

   public Card getC10 ()
   {
      return this.C10;
   }

   /**
    * <pre>
    *           0..1     object_CJ     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               CJ
    * </pre>
    */
   public static final String PROPERTY_CJ = "CJ";

   @Property( name = PROPERTY_CJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card CJ;

   @Property( name = PROPERTY_CJ )
   public boolean setCJ (Card value)
   {
      boolean changed = false;

      if (this.CJ != value)
      {
      
         Card oldValue = this.CJ;
         this.CJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CJ )
   public UlnoPlaysAnJAndChoosesASuitTest withCJ (Card value)
   {
      setCJ (value);
      return this;
   }

   public Card getCJ ()
   {
      return this.CJ;
   }

   /**
    * <pre>
    *           0..1     object_CurrentTurn     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Turn
    *           test               CurrentTurn
    * </pre>
    */
   public static final String PROPERTY_CURRENT_TURN = "CurrentTurn";

   @Property( name = PROPERTY_CURRENT_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn CurrentTurn;

   @Property( name = PROPERTY_CURRENT_TURN )
   public boolean setCurrentTurn (Turn value)
   {
      boolean changed = false;

      if (this.CurrentTurn != value)
      {
      
         Turn oldValue = this.CurrentTurn;
         this.CurrentTurn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CURRENT_TURN )
   public UlnoPlaysAnJAndChoosesASuitTest withCurrentTurn (Turn value)
   {
      setCurrentTurn (value);
      return this;
   }

   public Turn getCurrentTurn ()
   {
      return this.CurrentTurn;
   }

   /**
    * <pre>
    *           0..1     object_D9     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               D9
    * </pre>
    */
   public static final String PROPERTY_D9 = "D9";

   @Property( name = PROPERTY_D9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D9;

   @Property( name = PROPERTY_D9 )
   public boolean setD9 (Card value)
   {
      boolean changed = false;

      if (this.D9 != value)
      {
      
         Card oldValue = this.D9;
         this.D9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D9 )
   public UlnoPlaysAnJAndChoosesASuitTest withD9 (Card value)
   {
      setD9 (value);
      return this;
   }

   public Card getD9 ()
   {
      return this.D9;
   }

   /**
    * <pre>
    *           0..1     object_DA     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               DA
    * </pre>
    */
   public static final String PROPERTY_DA = "DA";

   @Property( name = PROPERTY_DA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DA;

   @Property( name = PROPERTY_DA )
   public boolean setDA (Card value)
   {
      boolean changed = false;

      if (this.DA != value)
      {
      
         Card oldValue = this.DA;
         this.DA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DA )
   public UlnoPlaysAnJAndChoosesASuitTest withDA (Card value)
   {
      setDA (value);
      return this;
   }

   public Card getDA ()
   {
      return this.DA;
   }

   /**
    * <pre>
    *           0..1     object_Deck     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Deck
    *           test               Deck
    * </pre>
    */
   public static final String PROPERTY_DECK = "Deck";

   @Property( name = PROPERTY_DECK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck Deck;

   @Property( name = PROPERTY_DECK )
   public boolean setDeck (Deck value)
   {
      boolean changed = false;

      if (this.Deck != value)
      {
      
         Deck oldValue = this.Deck;
         this.Deck = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DECK )
   public UlnoPlaysAnJAndChoosesASuitTest withDeck (Deck value)
   {
      setDeck (value);
      return this;
   }

   public Deck getDeck ()
   {
      return this.Deck;
   }

   /**
    * <pre>
    *           0..1     object_Eero     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Player
    *           test               Eero
    * </pre>
    */
   public static final String PROPERTY_EERO = "Eero";

   @Property( name = PROPERTY_EERO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Eero;

   @Property( name = PROPERTY_EERO )
   public boolean setEero (Player value)
   {
      boolean changed = false;

      if (this.Eero != value)
      {
      
         Player oldValue = this.Eero;
         this.Eero = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EERO )
   public UlnoPlaysAnJAndChoosesASuitTest withEero (Player value)
   {
      setEero (value);
      return this;
   }

   public Player getEero ()
   {
      return this.Eero;
   }

   /**
    * <pre>
    *           0..1     object_HJ     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               HJ
    * </pre>
    */
   public static final String PROPERTY_HJ = "HJ";

   @Property( name = PROPERTY_HJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HJ;

   @Property( name = PROPERTY_HJ )
   public boolean setHJ (Card value)
   {
      boolean changed = false;

      if (this.HJ != value)
      {
      
         Card oldValue = this.HJ;
         this.HJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HJ )
   public UlnoPlaysAnJAndChoosesASuitTest withHJ (Card value)
   {
      setHJ (value);
      return this;
   }

   public Card getHJ ()
   {
      return this.HJ;
   }

   /**
    * <pre>
    *           0..1     object_Open_deck     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Deck
    *           test               Open_deck
    * </pre>
    */
   public static final String PROPERTY_OPEN_DECK = "Open_deck";

   @Property( name = PROPERTY_OPEN_DECK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck Open_deck;

   @Property( name = PROPERTY_OPEN_DECK )
   public boolean setOpen_deck (Deck value)
   {
      boolean changed = false;

      if (this.Open_deck != value)
      {
      
         Deck oldValue = this.Open_deck;
         this.Open_deck = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN_DECK )
   public UlnoPlaysAnJAndChoosesASuitTest withOpen_deck (Deck value)
   {
      setOpen_deck (value);
      return this;
   }

   public Deck getOpen_deck ()
   {
      return this.Open_deck;
   }

   /**
    * <pre>
    *           0..1     object_S10     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               S10
    * </pre>
    */
   public static final String PROPERTY_S10 = "S10";

   @Property( name = PROPERTY_S10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S10;

   @Property( name = PROPERTY_S10 )
   public boolean setS10 (Card value)
   {
      boolean changed = false;

      if (this.S10 != value)
      {
      
         Card oldValue = this.S10;
         this.S10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S10 )
   public UlnoPlaysAnJAndChoosesASuitTest withS10 (Card value)
   {
      setS10 (value);
      return this;
   }

   public Card getS10 ()
   {
      return this.S10;
   }

   /**
    * <pre>
    *           0..1     object_S7     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               S7
    * </pre>
    */
   public static final String PROPERTY_S7 = "S7";

   @Property( name = PROPERTY_S7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S7;

   @Property( name = PROPERTY_S7 )
   public boolean setS7 (Card value)
   {
      boolean changed = false;

      if (this.S7 != value)
      {
      
         Card oldValue = this.S7;
         this.S7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S7 )
   public UlnoPlaysAnJAndChoosesASuitTest withS7 (Card value)
   {
      setS7 (value);
      return this;
   }

   public Card getS7 ()
   {
      return this.S7;
   }

   /**
    * <pre>
    *           0..1     object_S8     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               S8
    * </pre>
    */
   public static final String PROPERTY_S8 = "S8";

   @Property( name = PROPERTY_S8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S8;

   @Property( name = PROPERTY_S8 )
   public boolean setS8 (Card value)
   {
      boolean changed = false;

      if (this.S8 != value)
      {
      
         Card oldValue = this.S8;
         this.S8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S8 )
   public UlnoPlaysAnJAndChoosesASuitTest withS8 (Card value)
   {
      setS8 (value);
      return this;
   }

   public Card getS8 ()
   {
      return this.S8;
   }

   /**
    * <pre>
    *           0..1     object_S9     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               S9
    * </pre>
    */
   public static final String PROPERTY_S9 = "S9";

   @Property( name = PROPERTY_S9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S9;

   @Property( name = PROPERTY_S9 )
   public boolean setS9 (Card value)
   {
      boolean changed = false;

      if (this.S9 != value)
      {
      
         Card oldValue = this.S9;
         this.S9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S9 )
   public UlnoPlaysAnJAndChoosesASuitTest withS9 (Card value)
   {
      setS9 (value);
      return this;
   }

   public Card getS9 ()
   {
      return this.S9;
   }

   /**
    * <pre>
    *           0..1     object_SJ     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Card
    *           test               SJ
    * </pre>
    */
   public static final String PROPERTY_SJ = "SJ";

   @Property( name = PROPERTY_SJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card SJ;

   @Property( name = PROPERTY_SJ )
   public boolean setSJ (Card value)
   {
      boolean changed = false;

      if (this.SJ != value)
      {
      
         Card oldValue = this.SJ;
         this.SJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SJ )
   public UlnoPlaysAnJAndChoosesASuitTest withSJ (Card value)
   {
      setSJ (value);
      return this;
   }

   public Card getSJ ()
   {
      return this.SJ;
   }

   /**
    * <pre>
    *           0..1     object_Ulno     0..1
    * UlnoPlaysAnJAndChoosesASuitTest ------------------------> Player
    *           test               Ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "Ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.Ulno != value)
      {
      
         Player oldValue = this.Ulno;
         this.Ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public UlnoPlaysAnJAndChoosesASuitTest withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.Ulno;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;

      // // result situation: 
      // story pattern Result
      try 
      {
         fujaba__Success = false; 

         // check object Artjom is really bound
         JavaSDM.ensure ( Artjom != null, "check object Artjom is really bound" );
         // check object C10 is really bound
         JavaSDM.ensure ( C10 != null, "check object C10 is really bound" );
         // check object CJ is really bound
         JavaSDM.ensure ( CJ != null, "check object CJ is really bound" );
         // check object CurrentTurn is really bound
         JavaSDM.ensure ( CurrentTurn != null, "check object CurrentTurn is really bound" );
         // check object D9 is really bound
         JavaSDM.ensure ( D9 != null, "check object D9 is really bound" );
         // check object DA is really bound
         JavaSDM.ensure ( DA != null, "check object DA is really bound" );
         // check object Deck is really bound
         JavaSDM.ensure ( Deck != null, "check object Deck is really bound" );
         // check object Eero is really bound
         JavaSDM.ensure ( Eero != null, "check object Eero is really bound" );
         // check object HJ is really bound
         JavaSDM.ensure ( HJ != null, "check object HJ is really bound" );
         // check object Open_deck is really bound
         JavaSDM.ensure ( Open_deck != null, "check object Open_deck is really bound" );
         // check object S10 is really bound
         JavaSDM.ensure ( S10 != null, "check object S10 is really bound" );
         // check object S7 is really bound
         JavaSDM.ensure ( S7 != null, "check object S7 is really bound" );
         // check object S8 is really bound
         JavaSDM.ensure ( S8 != null, "check object S8 is really bound" );
         // check object S9 is really bound
         JavaSDM.ensure ( S9 != null, "check object S9 is really bound" );
         // check object SJ is really bound
         JavaSDM.ensure ( SJ != null, "check object SJ is really bound" );
         // check object Ulno is really bound
         JavaSDM.ensure ( Ulno != null, "check object Ulno is really bound" );
         // check isomorphic binding between objects Eero and Artjom
         JavaSDM.ensure ( !Eero.equals (Artjom), "check isomorphic binding between objects Eero and Artjom" );

         // check isomorphic binding between objects Ulno and Artjom
         JavaSDM.ensure ( !Ulno.equals (Artjom), "check isomorphic binding between objects Ulno and Artjom" );

         // check isomorphic binding between objects CJ and C10
         JavaSDM.ensure ( !CJ.equals (C10), "check isomorphic binding between objects CJ and C10" );

         // check isomorphic binding between objects D9 and C10
         JavaSDM.ensure ( !D9.equals (C10), "check isomorphic binding between objects D9 and C10" );

         // check isomorphic binding between objects DA and C10
         JavaSDM.ensure ( !DA.equals (C10), "check isomorphic binding between objects DA and C10" );

         // check isomorphic binding between objects HJ and C10
         JavaSDM.ensure ( !HJ.equals (C10), "check isomorphic binding between objects HJ and C10" );

         // check isomorphic binding between objects S10 and C10
         JavaSDM.ensure ( !S10.equals (C10), "check isomorphic binding between objects S10 and C10" );

         // check isomorphic binding between objects S7 and C10
         JavaSDM.ensure ( !S7.equals (C10), "check isomorphic binding between objects S7 and C10" );

         // check isomorphic binding between objects S8 and C10
         JavaSDM.ensure ( !S8.equals (C10), "check isomorphic binding between objects S8 and C10" );

         // check isomorphic binding between objects S9 and C10
         JavaSDM.ensure ( !S9.equals (C10), "check isomorphic binding between objects S9 and C10" );

         // check isomorphic binding between objects SJ and C10
         JavaSDM.ensure ( !SJ.equals (C10), "check isomorphic binding between objects SJ and C10" );

         // check isomorphic binding between objects D9 and CJ
         JavaSDM.ensure ( !D9.equals (CJ), "check isomorphic binding between objects D9 and CJ" );

         // check isomorphic binding between objects DA and CJ
         JavaSDM.ensure ( !DA.equals (CJ), "check isomorphic binding between objects DA and CJ" );

         // check isomorphic binding between objects HJ and CJ
         JavaSDM.ensure ( !HJ.equals (CJ), "check isomorphic binding between objects HJ and CJ" );

         // check isomorphic binding between objects S10 and CJ
         JavaSDM.ensure ( !S10.equals (CJ), "check isomorphic binding between objects S10 and CJ" );

         // check isomorphic binding between objects S7 and CJ
         JavaSDM.ensure ( !S7.equals (CJ), "check isomorphic binding between objects S7 and CJ" );

         // check isomorphic binding between objects S8 and CJ
         JavaSDM.ensure ( !S8.equals (CJ), "check isomorphic binding between objects S8 and CJ" );

         // check isomorphic binding between objects S9 and CJ
         JavaSDM.ensure ( !S9.equals (CJ), "check isomorphic binding between objects S9 and CJ" );

         // check isomorphic binding between objects SJ and CJ
         JavaSDM.ensure ( !SJ.equals (CJ), "check isomorphic binding between objects SJ and CJ" );

         // check isomorphic binding between objects DA and D9
         JavaSDM.ensure ( !DA.equals (D9), "check isomorphic binding between objects DA and D9" );

         // check isomorphic binding between objects HJ and D9
         JavaSDM.ensure ( !HJ.equals (D9), "check isomorphic binding between objects HJ and D9" );

         // check isomorphic binding between objects S10 and D9
         JavaSDM.ensure ( !S10.equals (D9), "check isomorphic binding between objects S10 and D9" );

         // check isomorphic binding between objects S7 and D9
         JavaSDM.ensure ( !S7.equals (D9), "check isomorphic binding between objects S7 and D9" );

         // check isomorphic binding between objects S8 and D9
         JavaSDM.ensure ( !S8.equals (D9), "check isomorphic binding between objects S8 and D9" );

         // check isomorphic binding between objects S9 and D9
         JavaSDM.ensure ( !S9.equals (D9), "check isomorphic binding between objects S9 and D9" );

         // check isomorphic binding between objects SJ and D9
         JavaSDM.ensure ( !SJ.equals (D9), "check isomorphic binding between objects SJ and D9" );

         // check isomorphic binding between objects HJ and DA
         JavaSDM.ensure ( !HJ.equals (DA), "check isomorphic binding between objects HJ and DA" );

         // check isomorphic binding between objects S10 and DA
         JavaSDM.ensure ( !S10.equals (DA), "check isomorphic binding between objects S10 and DA" );

         // check isomorphic binding between objects S7 and DA
         JavaSDM.ensure ( !S7.equals (DA), "check isomorphic binding between objects S7 and DA" );

         // check isomorphic binding between objects S8 and DA
         JavaSDM.ensure ( !S8.equals (DA), "check isomorphic binding between objects S8 and DA" );

         // check isomorphic binding between objects S9 and DA
         JavaSDM.ensure ( !S9.equals (DA), "check isomorphic binding between objects S9 and DA" );

         // check isomorphic binding between objects SJ and DA
         JavaSDM.ensure ( !SJ.equals (DA), "check isomorphic binding between objects SJ and DA" );

         // check isomorphic binding between objects Ulno and Eero
         JavaSDM.ensure ( !Ulno.equals (Eero), "check isomorphic binding between objects Ulno and Eero" );

         // check isomorphic binding between objects S10 and HJ
         JavaSDM.ensure ( !S10.equals (HJ), "check isomorphic binding between objects S10 and HJ" );

         // check isomorphic binding between objects S7 and HJ
         JavaSDM.ensure ( !S7.equals (HJ), "check isomorphic binding between objects S7 and HJ" );

         // check isomorphic binding between objects S8 and HJ
         JavaSDM.ensure ( !S8.equals (HJ), "check isomorphic binding between objects S8 and HJ" );

         // check isomorphic binding between objects S9 and HJ
         JavaSDM.ensure ( !S9.equals (HJ), "check isomorphic binding between objects S9 and HJ" );

         // check isomorphic binding between objects SJ and HJ
         JavaSDM.ensure ( !SJ.equals (HJ), "check isomorphic binding between objects SJ and HJ" );

         // check isomorphic binding between objects S7 and S10
         JavaSDM.ensure ( !S7.equals (S10), "check isomorphic binding between objects S7 and S10" );

         // check isomorphic binding between objects S8 and S10
         JavaSDM.ensure ( !S8.equals (S10), "check isomorphic binding between objects S8 and S10" );

         // check isomorphic binding between objects S9 and S10
         JavaSDM.ensure ( !S9.equals (S10), "check isomorphic binding between objects S9 and S10" );

         // check isomorphic binding between objects SJ and S10
         JavaSDM.ensure ( !SJ.equals (S10), "check isomorphic binding between objects SJ and S10" );

         // check isomorphic binding between objects S8 and S7
         JavaSDM.ensure ( !S8.equals (S7), "check isomorphic binding between objects S8 and S7" );

         // check isomorphic binding between objects S9 and S7
         JavaSDM.ensure ( !S9.equals (S7), "check isomorphic binding between objects S9 and S7" );

         // check isomorphic binding between objects SJ and S7
         JavaSDM.ensure ( !SJ.equals (S7), "check isomorphic binding between objects SJ and S7" );

         // check isomorphic binding between objects S9 and S8
         JavaSDM.ensure ( !S9.equals (S8), "check isomorphic binding between objects S9 and S8" );

         // check isomorphic binding between objects SJ and S8
         JavaSDM.ensure ( !SJ.equals (S8), "check isomorphic binding between objects SJ and S8" );

         // check isomorphic binding between objects SJ and S9
         JavaSDM.ensure ( !SJ.equals (S9), "check isomorphic binding between objects SJ and S9" );

         // check link has from C10 to Artjom
         JavaSDM.ensure (Artjom.equals (C10.getPlayer ()), "check link has from C10 to Artjom");

         // check link has from CJ to Artjom
         JavaSDM.ensure (Artjom.equals (CJ.getPlayer ()), "check link has from CJ to Artjom");

         // check link has from CurrentTurn to Artjom
         JavaSDM.ensure (Artjom.equals (CurrentTurn.getPlayer ()), "check link has from CurrentTurn to Artjom");

         // check link has from D9 to Eero
         JavaSDM.ensure (Eero.equals (D9.getPlayer ()), "check link has from D9 to Eero");

         // check link has from DA to Eero
         JavaSDM.ensure (Eero.equals (DA.getPlayer ()), "check link has from DA to Eero");

         // check link has from S7 to Ulno
         JavaSDM.ensure (Ulno.equals (S7.getPlayer ()), "check link has from S7 to Ulno");

         // check link on top of from HJ to SJ
         JavaSDM.ensure (SJ.equals (HJ.getCard ()), "check link on top of from HJ to SJ");

         // check link on top of from S9 to S8
         JavaSDM.ensure (S8.equals (S9.getCard ()), "check link on top of from S9 to S8");

         // check link on top of from SJ to S8
         JavaSDM.ensure (S8.equals (SJ.getCard ()), "check link on top of from SJ to S8");

         // check link right of from Eero to Artjom
         JavaSDM.ensure (Artjom.equals (Eero.getPlayer ()), "check link right of from Eero to Artjom");

         // check link right of from Eero to Ulno
         JavaSDM.ensure (Ulno.equals (Eero.getPlayer ()), "check link right of from Eero to Ulno");

         // check link right of from Ulno to Artjom
         JavaSDM.ensure (Artjom.equals (Ulno.getPlayer ()), "check link right of from Ulno to Artjom");

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player Eero = null;
      Player Ulno = null;
      Card D9 = null;
      Card DA = null;
      Player Artjom = null;
      Card S7 = null;
      Turn CurrentTurn = null;
      Card HJ = null;
      Card C10 = null;
      Card CJ = null;
      Deck Deck = null;
      Deck Open_deck = null;
      Card S10 = null;
      Card SJ = null;
      Card S8 = null;
      Card S9 = null;

      // // start situation: 
      // story pattern Action
      try 
      {
         fujaba__Success = false; 

         // create object Eero
         Eero = new Player ( );

         // create object Ulno
         Ulno = new Player ( );

         // create object D9
         D9 = new Card ( );

         // create object DA
         DA = new Card ( );

         // create object Artjom
         Artjom = new Player ( );

         // create object S7
         S7 = new Card ( );

         // create object CurrentTurn
         CurrentTurn = new Turn ( );

         // create object HJ
         HJ = new Card ( );

         // create object C10
         C10 = new Card ( );

         // create object CJ
         CJ = new Card ( );

         // create object Deck
         Deck = new Deck ( );

         // create object Open_deck
         Open_deck = new Deck ( );

         // create object S10
         S10 = new Card ( );

         // create object SJ
         SJ = new Card ( );

         // create object S8
         S8 = new Card ( );

         // create object S9
         S9 = new Card ( );

         // create link right of from Ulno to Eero
         Ulno.setPlayer (Eero);

         // create link has from D9 to Eero
         D9.setPlayer (Eero);

         // create link has from DA to Eero
         DA.setPlayer (Eero);

         // create link right of from Artjom to Eero
         Artjom.setPlayer (Eero);

         // create link object_Eero from this to Eero
         this.setEero (Eero);

         // create link right of from Artjom to Ulno
         Artjom.setPlayer (Ulno);

         // create link has from S7 to Ulno
         S7.setPlayer (Ulno);

         // create link has from CurrentTurn to Ulno
         CurrentTurn.setPlayer (Ulno);

         // create link has from HJ to Ulno
         HJ.setPlayer (Ulno);

         // create link object_Ulno from this to Ulno
         this.setUlno (Ulno);

         // create link has from C10 to Artjom
         C10.setPlayer (Artjom);

         // create link has from CJ to Artjom
         CJ.setPlayer (Artjom);

         // create link object_Artjom from this to Artjom
         this.setArtjom (Artjom);

         // create link object_C10 from this to C10
         this.setC10 (C10);

         // create link object_CJ from this to CJ
         this.setCJ (CJ);

         // create link object_D9 from this to D9
         this.setD9 (D9);

         // create link object_DA from this to DA
         this.setDA (DA);

         // create link object_S7 from this to S7
         this.setS7 (S7);

         // create link object_Deck from this to Deck
         this.setDeck (Deck);

         // create link object_Open_deck from this to Open_deck
         this.setOpen_deck (Open_deck);

         // create link object_S10 from this to S10
         this.setS10 (S10);

         // create link on top of from S8 to SJ
         S8.setCard (SJ);

         // create link object_SJ from this to SJ
         this.setSJ (SJ);

         // create link on top of from S9 to S8
         S9.setCard (S8);

         // create link object_S8 from this to S8
         this.setS8 (S8);

         // create link object_S9 from this to S9
         this.setS9 (S9);

         // create link object_CurrentTurn from this to CurrentTurn
         this.setCurrentTurn (CurrentTurn);

         // create link object_HJ from this to HJ
         this.setHJ (HJ);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testUlnoPlaysAnJAndChoosesASuit ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.setArtjom (null);
      this.setC10 (null);
      this.setCJ (null);
      this.setCurrentTurn (null);
      this.setD9 (null);
      this.setDA (null);
      this.setDeck (null);
      this.setEero (null);
      this.setHJ (null);
      this.setOpen_deck (null);
      this.setS10 (null);
      this.setS7 (null);
      this.setS8 (null);
      this.setS9 (null);
      this.setSJ (null);
      this.setUlno (null);
   }
}


