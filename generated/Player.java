/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Player
{



   /**
    * <pre>
    *           0..1     has     0..n
    * Player ------------------------- Card
    *           player               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Card.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Card> card;

   @Property( name = PROPERTY_CARD )
   public Set<? extends Card> getCard()
   {
      return ((this.card == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.card));
   }

   @Property( name = PROPERTY_CARD )
   public boolean addToCard (Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.card == null)
         {
            this.card = new FHashSet<Card> ();

         }
      
         changed = this.card.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public Player withCard (Card value)
   {
      addToCard (value);
      return this;
   }

   public Player withoutCard (Card value)
   {
      removeFromCard (value);
      return this;
   }


   public boolean removeFromCard (Card value)
   {
      boolean changed = false;

      if ((this.card != null) && (value != null))
      {
      
         changed = this.card.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public void removeAllFromCard (){
   
      Card tmpValue;
      Iterator<? extends Card> iter = this.iteratorOfCard ();
      while (iter.hasNext ())
      {
         tmpValue = (Card) iter.next ();
         this.removeFromCard (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CARD )
   public boolean hasInCard (Card value)
   {
      return ((this.card != null) &&
              (value != null) &&
              this.card.contains (value));
   }

   @Property( name = PROPERTY_CARD )
   public Iterator<? extends Card> iteratorOfCard ()
   {
      return ((this.card == null)
              ? FEmptyIterator.<Card>get ()
              : this.card.iterator ());
   }

   @Property( name = PROPERTY_CARD )
   public int sizeOfCard ()
   {
      return ((this.card == null)
              ? 0
              : this.card.size ());
   }

   /**
    * <pre>
    *           0..1     is     0..1
    * Player ------------------------- Dealer
    *           player               dealer
    * </pre>
    */
   public static final String PROPERTY_DEALER = "dealer";

   @Property( name = PROPERTY_DEALER, partner = Dealer.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Dealer dealer;

   @Property( name = PROPERTY_DEALER )
   public boolean setDealer (Dealer value)
   {
      boolean changed = false;

      if (this.dealer != value)
      {
      
         Dealer oldValue = this.dealer;
         Player source = this;
         if (this.dealer != null)
         {
            this.dealer = null;
            oldValue.setPlayer (null);
         }
         this.dealer = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DEALER )
   public Player withDealer (Dealer value)
   {
      setDealer (value);
      return this;
   }

   public Dealer getDealer ()
   {
      return this.dealer;
   }

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public Player withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   /**
    * <pre>
    *           0..1     right of     0..1
    * Player ------------------------- Player
    *           player               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (Player value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         Player oldValue = this.player;
         Player source = this;
         if (this.player != null)
         {
            this.player = null;
            oldValue.setPlayer (null);
         }
         this.player = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Player withPlayer (Player value)
   {
      setPlayer (value);
      return this;
   }

   public Player getPlayer ()
   {
      return this.player;
   }

   /**
    * <pre>
    *           0..1     has     0..1
    * Player ------------------------- Turn
    *           player               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, partner = Turn.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Turn oldValue = this.turn;
         Player source = this;
         if (this.turn != null)
         {
            this.turn = null;
            oldValue.setPlayer (null);
         }
         this.turn = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Player withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.turn;
   }

   public void removeYou()
   {
      this.removeAllFromCard ();
      this.setDealer (null);
      this.setPlayer (null);
      this.setTurn (null);
   }
}


