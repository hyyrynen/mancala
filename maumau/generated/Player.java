/*
 * generated by Fujaba - CodeGen2
 */
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import java.util.*;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Player
{



   public void DealNCardsToEach (int n , ClosedDeck p1 )
   {
      boolean fujaba__Success = false;
      Dealer dealer = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link is from this to dealer
         dealer = this.getDealer ();

         // check object dealer is really bound
         JavaSDM.ensure ( dealer != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return ;

      }
      return ;
   }

   public void Play7AndForceNextPlayerToDraw2Cards ()
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToCard = null;
      Card card = null;
      Player player = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // constraint this.hasCardWithValue("7")
         JavaSDM.ensure ( this.hasCardWithValue("7") );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link has from this to card
         fujaba__Success = false;
         fujaba__IterThisToCard = this.iteratorOfCard ();

         while ( !(fujaba__Success) && fujaba__IterThisToCard.hasNext () )
         {
            try
            {
               card = (Card) fujaba__IterThisToCard.next ();

               // check object card is really bound
               JavaSDM.ensure ( card != null );
               // attribute condition value == "7"
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) card.getValue (), "7") == 0 );


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object card is really bound
         JavaSDM.ensure ( card != null );
         // check link has from card to this
         JavaSDM.ensure (this.equals (card.getPlayer ()));

         // search to-one link right of from this to player
         player = this.getPlayer ();

         // check object player is really bound
         JavaSDM.ensure ( player != null );

         // check isomorphic binding between objects this and player
         JavaSDM.ensure ( !this.equals (player) );


         // attribute condition value == "7"
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) card.getValue (), "7") == 0 );

         // destroy link has from card to this
         card.setPlayer (null);
         // create link on top from deck to card
         deck.setCard (card);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      return ;
   }

   public void Play8AndMakeNextPlayerPass ()
   {

   }

   public void PlayCard ()
   {

   }

   public void PlayJackAndSelectSuit ()
   {

   }

   /**
    * <pre>
    *           0..1     has     0..n
    * Player ------------------------- Card
    *           player               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Card.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Card> card;

   @Property( name = PROPERTY_CARD )
   public Set<? extends Card> getCard()
   {
      return ((this.card == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.card));
   }

   @Property( name = PROPERTY_CARD )
   public boolean addToCard (Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.card == null)
         {
            this.card = new FHashSet<Card> ();

         }
      
         changed = this.card.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public Player withCard (Card value)
   {
      addToCard (value);
      return this;
   }

   public Player withoutCard (Card value)
   {
      removeFromCard (value);
      return this;
   }


   public boolean removeFromCard (Card value)
   {
      boolean changed = false;

      if ((this.card != null) && (value != null))
      {
      
         changed = this.card.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public void removeAllFromCard (){
   
      Card tmpValue;
      Iterator<? extends Card> iter = this.iteratorOfCard ();
      while (iter.hasNext ())
      {
         tmpValue = (Card) iter.next ();
         this.removeFromCard (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CARD )
   public boolean hasInCard (Card value)
   {
      return ((this.card != null) &&
              (value != null) &&
              this.card.contains (value));
   }

   @Property( name = PROPERTY_CARD )
   public Iterator<? extends Card> iteratorOfCard ()
   {
      return ((this.card == null)
              ? FEmptyIterator.<Card>get ()
              : this.card.iterator ());
   }

   @Property( name = PROPERTY_CARD )
   public int sizeOfCard ()
   {
      return ((this.card == null)
              ? 0
              : this.card.size ());
   }

   /**
    * <pre>
    *           0..1     is     0..1
    * Player ------------------------- Dealer
    *           player               dealer
    * </pre>
    */
   public static final String PROPERTY_DEALER = "dealer";

   @Property( name = PROPERTY_DEALER, partner = Dealer.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Dealer dealer;

   @Property( name = PROPERTY_DEALER )
   public boolean setDealer (Dealer value)
   {
      boolean changed = false;

      if (this.dealer != value)
      {
      
         Dealer oldValue = this.dealer;
         Player source = this;
         if (this.dealer != null)
         {
            this.dealer = null;
            oldValue.setPlayer (null);
         }
         this.dealer = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DEALER )
   public Player withDealer (Dealer value)
   {
      setDealer (value);
      return this;
   }

   public Dealer getDealer ()
   {
      return this.dealer;
   }

   /**
    * <pre>
    *           0..1     can access     0..1
    * Player ------------------------- Deck
    *           player               deck
    * </pre>
    */
   public static final String PROPERTY_DECK = "deck";

   @Property( name = PROPERTY_DECK, partner = Deck.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck deck;

   @Property( name = PROPERTY_DECK )
   public boolean setDeck (Deck value)
   {
      boolean changed = false;

      if (this.deck != value)
      {
      
         Deck oldValue = this.deck;
         Player source = this;
         if (this.deck != null)
         {
            this.deck = null;
            oldValue.setPlayer (null);
         }
         this.deck = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DECK )
   public Player withDeck (Deck value)
   {
      setDeck (value);
      return this;
   }

   public Deck getDeck ()
   {
      return this.deck;
   }

   public void getCard (Deck deck )
   {
      boolean fujaba__Success = false;
      Card card = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object deck is really bound
         JavaSDM.ensure ( deck != null );
         // check link can access from deck to this
         JavaSDM.ensure (this.equals (deck.getPlayer ()));

         // create object card
         card = this.getTopCard(deck);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object deck is really bound
         JavaSDM.ensure ( deck != null );
         // check link can access from deck to this
         JavaSDM.ensure (this.equals (deck.getPlayer ()));

         // create object card
         card = this.getTopCard(deck);

         // create link has from card to this
         card.setPlayer (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      return ;
   }

   public Card getTopCard (Deck deck )
   {
      boolean fujaba__Success = false;
      Card card = null;
      Card nextcard = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object deck is really bound
         JavaSDM.ensure ( deck != null );
         // search to-one link on top from deck to card
         card = deck.getCard ();

         // check object card is really bound
         JavaSDM.ensure ( card != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      while( true )
      {
         // story pattern Successor of successor
         try 
         {
            fujaba__Success = false; 

            // check object card is really bound
            JavaSDM.ensure ( card != null );
            // search to-one link on top of from card to nextcard
            nextcard = card.getCard ();

            // check object nextcard is really bound
            JavaSDM.ensure ( nextcard != null );

            // check isomorphic binding between objects nextcard and card
            JavaSDM.ensure ( !nextcard.equals (card) );


            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



      	// loop termination check 
      	if ( !( fujaba__Success ) )
      	{
      		break;
      	}
	
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // check isomorphic binding between objects nextcard and card
            JavaSDM.ensure ( !nextcard.equals (card) );

            // collabStat call
            card = nextcard;
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      return card;
   }

   public boolean hasCardWithValue (String val )
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToCard = null;
      Card card = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link has from this to card
         fujaba__Success = false;
         fujaba__IterThisToCard = this.iteratorOfCard ();

         while ( !(fujaba__Success) && fujaba__IterThisToCard.hasNext () )
         {
            try
            {
               card = (Card) fujaba__IterThisToCard.next ();

               // check object card is really bound
               JavaSDM.ensure ( card != null );
               // attribute condition value == val
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) card.getValue (), val) == 0 );


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return false;

      }
      return true;
   }

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public Player withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   /**
    * <pre>
    *           0..1     right of     0..1
    * Player ------------------------- Player
    *           player               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (Player value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         Player oldValue = this.player;
         Player source = this;
         if (this.player != null)
         {
            this.player = null;
            oldValue.setPlayer (null);
         }
         this.player = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Player withPlayer (Player value)
   {
      setPlayer (value);
      return this;
   }

   public Player getPlayer ()
   {
      return this.player;
   }

   public void putCard (OpenDeck open )
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToCard1 = null;
      Card card1 = null;
      Card card = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object open is really bound
         JavaSDM.ensure ( open != null );
         // check link can access from open to this
         JavaSDM.ensure (this.equals (open.getPlayer ()));

         // iterate to-many link has from this to card1
         fujaba__Success = false;
         fujaba__IterThisToCard1 = this.iteratorOfCard ();

         while ( !(fujaba__Success) && fujaba__IterThisToCard1.hasNext () )
         {
            try
            {
               card1 = (Card) fujaba__IterThisToCard1.next ();

               // check object card1 is really bound
               JavaSDM.ensure ( card1 != null );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         // create object card
         card = this.getTopCard(open);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object open is really bound
         JavaSDM.ensure ( open != null );
         // check link can access from open to this
         JavaSDM.ensure (this.equals (open.getPlayer ()));

         // iterate to-many link has from this to card1
         fujaba__Success = false;
         fujaba__IterThisToCard1 = this.iteratorOfCard ();

         while ( !(fujaba__Success) && fujaba__IterThisToCard1.hasNext () )
         {
            try
            {
               card1 = (Card) fujaba__IterThisToCard1.next ();

               // check object card1 is really bound
               JavaSDM.ensure ( card1 != null );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         // destroy link has from card1 to this
         card1.setPlayer (null);
         // create object card
         card = this.getTopCard(open);

         // create link on top of from card1 to card
         card1.setCard (card);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..1     has     0..1
    * Player ------------------------- Turn
    *           player               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, partner = Turn.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Turn oldValue = this.turn;
         Player source = this;
         if (this.turn != null)
         {
            this.turn = null;
            oldValue.setPlayer (null);
         }
         this.turn = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Player withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.turn;
   }

   public void removeYou()
   {
      this.removeAllFromCard ();
      this.setDealer (null);
      this.setDeck (null);
      this.setPlayer (null);
      this.setTurn (null);
   }
}


