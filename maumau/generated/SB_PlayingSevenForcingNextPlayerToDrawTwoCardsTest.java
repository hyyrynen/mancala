/*
 * generated by Fujaba - CodeGen2
 */
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import junit.framework.TestCase;


public class SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest extends TestCase
{



   public void assertStep1 ()
   {
      boolean fujaba__Success = false;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object card1 is really bound
         JavaSDM.ensure ( card1 != null, "check object card1 is really bound" );
         // check object card2 is really bound
         JavaSDM.ensure ( card2 != null, "check object card2 is really bound" );
         // check object card3 is really bound
         JavaSDM.ensure ( card3 != null, "check object card3 is really bound" );
         // check object card is really bound
         JavaSDM.ensure ( card != null, "check object card is really bound" );
         // check object closed is really bound
         JavaSDM.ensure ( closed != null, "check object closed is really bound" );
         // check object open is really bound
         JavaSDM.ensure ( open != null, "check object open is really bound" );
         // check object player is really bound
         JavaSDM.ensure ( player != null, "check object player is really bound" );
         // check object player is really bound
         JavaSDM.ensure ( player != null, "check object player is really bound" );
         // check isomorphic binding between objects card2 and card1
         JavaSDM.ensure ( !card2.equals (card1), "check isomorphic binding between objects card2 and card1" );

         // check isomorphic binding between objects card3 and card1
         JavaSDM.ensure ( !card3.equals (card1), "check isomorphic binding between objects card3 and card1" );

         // check isomorphic binding between objects card1 and card
         JavaSDM.ensure ( !card1.equals (card), "check isomorphic binding between objects card1 and card" );

         // check isomorphic binding between objects card3 and card2
         JavaSDM.ensure ( !card3.equals (card2), "check isomorphic binding between objects card3 and card2" );

         // check isomorphic binding between objects card2 and card
         JavaSDM.ensure ( !card2.equals (card), "check isomorphic binding between objects card2 and card" );

         // check isomorphic binding between objects card3 and card
         JavaSDM.ensure ( !card3.equals (card), "check isomorphic binding between objects card3 and card" );

         // check isomorphic binding between objects player and player
         JavaSDM.ensure ( !player.equals (player), "check isomorphic binding between objects player and player" );

         // check link has from card to player
         JavaSDM.ensure (player.equals (card.getPlayer ()), "check link has from card to player");

         // check link on top of from card2 to card1
         JavaSDM.ensure (card1.equals (card2.getCard ()), "check link on top of from card2 to card1");

         // check link on top of from card3 to card2
         JavaSDM.ensure (card2.equals (card3.getCard ()), "check link on top of from card3 to card2");

         // check link on top from card1 to closed
         JavaSDM.ensure (closed.equals (card1.getDeck ()), "check link on top from card1 to closed");

         // check link right of from player to player
         JavaSDM.ensure (player.equals (player.getPlayer ()), "check link right of from player to player");

         // attribute condition value == "7"
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) card.getValue (), "7") == 0, "attribute condition value == \"7\"" );

         // destroy link has from card to player
         card.setPlayer (null);
         // destroy link on top of from card2 to card1
         card2.setCard (null);
         // destroy link on top of from card3 to card2
         card3.setCard (null);
         // create link has from card2 to player
         card2.setPlayer (player);

         // create link has from card3 to player
         card3.setPlayer (player);

         // create link on top from open to card
         open.setCard (card);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   /**
    * <pre>
    *           0..1     object_card1     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> Card
    *           test               card1
    * </pre>
    */
   public static final String PROPERTY_CARD1 = "card1";

   @Property( name = PROPERTY_CARD1, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card card1;

   @Property( name = PROPERTY_CARD1 )
   public boolean setCard1 (Card value)
   {
      boolean changed = false;

      if (this.card1 != value)
      {
      
         Card oldValue = this.card1;
         this.card1 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD1 )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withCard1 (Card value)
   {
      setCard1 (value);
      return this;
   }

   public Card getCard1 ()
   {
      return this.card1;
   }

   /**
    * <pre>
    *           0..1     object_card2     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> Card
    *           test               card2
    * </pre>
    */
   public static final String PROPERTY_CARD2 = "card2";

   @Property( name = PROPERTY_CARD2, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card card2;

   @Property( name = PROPERTY_CARD2 )
   public boolean setCard2 (Card value)
   {
      boolean changed = false;

      if (this.card2 != value)
      {
      
         Card oldValue = this.card2;
         this.card2 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD2 )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withCard2 (Card value)
   {
      setCard2 (value);
      return this;
   }

   public Card getCard2 ()
   {
      return this.card2;
   }

   /**
    * <pre>
    *           0..1     object_card3     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> Card
    *           test               card3
    * </pre>
    */
   public static final String PROPERTY_CARD3 = "card3";

   @Property( name = PROPERTY_CARD3, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card card3;

   @Property( name = PROPERTY_CARD3 )
   public boolean setCard3 (Card value)
   {
      boolean changed = false;

      if (this.card3 != value)
      {
      
         Card oldValue = this.card3;
         this.card3 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD3 )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withCard3 (Card value)
   {
      setCard3 (value);
      return this;
   }

   public Card getCard3 ()
   {
      return this.card3;
   }

   /**
    * <pre>
    *           0..1     object_card     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> Card
    *           test               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card card;

   @Property( name = PROPERTY_CARD )
   public boolean setCard (Card value)
   {
      boolean changed = false;

      if (this.card != value)
      {
      
         Card oldValue = this.card;
         this.card = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withCard (Card value)
   {
      setCard (value);
      return this;
   }

   public Card getCard ()
   {
      return this.card;
   }

   /**
    * <pre>
    *           0..1     object_closed     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> ClosedDeck
    *           test               closed
    * </pre>
    */
   public static final String PROPERTY_CLOSED = "closed";

   @Property( name = PROPERTY_CLOSED, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ClosedDeck closed;

   @Property( name = PROPERTY_CLOSED )
   public boolean setClosed (ClosedDeck value)
   {
      boolean changed = false;

      if (this.closed != value)
      {
      
         ClosedDeck oldValue = this.closed;
         this.closed = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CLOSED )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withClosed (ClosedDeck value)
   {
      setClosed (value);
      return this;
   }

   public ClosedDeck getClosed ()
   {
      return this.closed;
   }

   /**
    * <pre>
    *           0..1     object_open     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> OpenDeck
    *           test               open
    * </pre>
    */
   public static final String PROPERTY_OPEN = "open";

   @Property( name = PROPERTY_OPEN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private OpenDeck open;

   @Property( name = PROPERTY_OPEN )
   public boolean setOpen (OpenDeck value)
   {
      boolean changed = false;

      if (this.open != value)
      {
      
         OpenDeck oldValue = this.open;
         this.open = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withOpen (OpenDeck value)
   {
      setOpen (value);
      return this;
   }

   public OpenDeck getOpen ()
   {
      return this.open;
   }

   /**
    * <pre>
    *           0..1     object_player     0..1
    * SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest ------------------------> Player
    *           test               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (Player value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         Player oldValue = this.player;
         this.player = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public SB_PlayingSevenForcingNextPlayerToDrawTwoCardsTest withPlayer (Player value)
   {
      setPlayer (value);
      return this;
   }

   public Player getPlayer ()
   {
      return this.player;
   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player player = null;
      Card card = null;
      OpenDeck open = null;
      ClosedDeck closed = null;
      Card card1 = null;
      Card card2 = null;
      Card card3 = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object player
         player = new Player ( );

         // create object card
         card = new Card ( );

         // create object open
         open = new OpenDeck ( );

         // create object closed
         closed = new ClosedDeck ( );

         // create object card1
         card1 = new Card ( );

         // create object card2
         card2 = new Card ( );

         // create object card3
         card3 = new Card ( );

         // assign attribute card
         card.setValue ("7");
         // create link object_open from this to open
         this.setOpen (open);

         // create link on top from card1 to closed
         card1.setDeck (closed);

         // create link object_closed from this to closed
         this.setClosed (closed);

         // create link on top of from card2 to card1
         card2.setCard (card1);

         // create link object_card1 from this to card1
         this.setCard1 (card1);

         // create link on top of from card3 to card2
         card3.setCard (card2);

         // create link object_card2 from this to card2
         this.setCard2 (card2);

         // create link object_card3 from this to card3
         this.setCard3 (card3);

         // create link has from card to player
         card.setPlayer (player);

         // create link object_player from this to player
         this.setPlayer (player);

         // create link object_card from this to card
         this.setCard (card);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testSB_PlayingSevenForcingNextPlayerToDrawTwoCards ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.setCard1 (null);
      this.setCard2 (null);
      this.setCard3 (null);
      this.setCard (null);
      this.setClosed (null);
      this.setOpen (null);
      this.setPlayer (null);
   }
}


