/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.TestCase;


public class UulnoPlays7ForcingArtjomDraw2CardsTest extends TestCase
{



   /**
    * <pre>
    *           0..1     object_Artjom     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Player
    *           test               Artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "Artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.Artjom != value)
      {
      
         Player oldValue = this.Artjom;
         this.Artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.Artjom;
   }

   /**
    * <pre>
    *           0..1     object_C9     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               C9
    * </pre>
    */
   public static final String PROPERTY_C9 = "C9";

   @Property( name = PROPERTY_C9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C9;

   @Property( name = PROPERTY_C9 )
   public boolean setC9 (Card value)
   {
      boolean changed = false;

      if (this.C9 != value)
      {
      
         Card oldValue = this.C9;
         this.C9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C9 )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withC9 (Card value)
   {
      setC9 (value);
      return this;
   }

   public Card getC9 ()
   {
      return this.C9;
   }

   /**
    * <pre>
    *           0..1     object_CK     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               CK
    * </pre>
    */
   public static final String PROPERTY_CK = "CK";

   @Property( name = PROPERTY_CK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card CK;

   @Property( name = PROPERTY_CK )
   public boolean setCK (Card value)
   {
      boolean changed = false;

      if (this.CK != value)
      {
      
         Card oldValue = this.CK;
         this.CK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CK )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withCK (Card value)
   {
      setCK (value);
      return this;
   }

   public Card getCK ()
   {
      return this.CK;
   }

   /**
    * <pre>
    *           0..1     object_Closed     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Deck
    *           test               Closed
    * </pre>
    */
   public static final String PROPERTY_CLOSED = "Closed";

   @Property( name = PROPERTY_CLOSED, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck Closed;

   @Property( name = PROPERTY_CLOSED )
   public boolean setClosed (Deck value)
   {
      boolean changed = false;

      if (this.Closed != value)
      {
      
         Deck oldValue = this.Closed;
         this.Closed = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CLOSED )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withClosed (Deck value)
   {
      setClosed (value);
      return this;
   }

   public Deck getClosed ()
   {
      return this.Closed;
   }

   /**
    * <pre>
    *           0..1     object_CurrentTurn     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Turn
    *           test               CurrentTurn
    * </pre>
    */
   public static final String PROPERTY_CURRENT_TURN = "CurrentTurn";

   @Property( name = PROPERTY_CURRENT_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn CurrentTurn;

   @Property( name = PROPERTY_CURRENT_TURN )
   public boolean setCurrentTurn (Turn value)
   {
      boolean changed = false;

      if (this.CurrentTurn != value)
      {
      
         Turn oldValue = this.CurrentTurn;
         this.CurrentTurn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CURRENT_TURN )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withCurrentTurn (Turn value)
   {
      setCurrentTurn (value);
      return this;
   }

   public Turn getCurrentTurn ()
   {
      return this.CurrentTurn;
   }

   /**
    * <pre>
    *           0..1     object_D10     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               D10
    * </pre>
    */
   public static final String PROPERTY_D10 = "D10";

   @Property( name = PROPERTY_D10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D10;

   @Property( name = PROPERTY_D10 )
   public boolean setD10 (Card value)
   {
      boolean changed = false;

      if (this.D10 != value)
      {
      
         Card oldValue = this.D10;
         this.D10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D10 )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withD10 (Card value)
   {
      setD10 (value);
      return this;
   }

   public Card getD10 ()
   {
      return this.D10;
   }

   /**
    * <pre>
    *           0..1     object_D9     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               D9
    * </pre>
    */
   public static final String PROPERTY_D9 = "D9";

   @Property( name = PROPERTY_D9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D9;

   @Property( name = PROPERTY_D9 )
   public boolean setD9 (Card value)
   {
      boolean changed = false;

      if (this.D9 != value)
      {
      
         Card oldValue = this.D9;
         this.D9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D9 )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withD9 (Card value)
   {
      setD9 (value);
      return this;
   }

   public Card getD9 ()
   {
      return this.D9;
   }

   /**
    * <pre>
    *           0..1     object_DJ     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               DJ
    * </pre>
    */
   public static final String PROPERTY_DJ = "DJ";

   @Property( name = PROPERTY_DJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DJ;

   @Property( name = PROPERTY_DJ )
   public boolean setDJ (Card value)
   {
      boolean changed = false;

      if (this.DJ != value)
      {
      
         Card oldValue = this.DJ;
         this.DJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DJ )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withDJ (Card value)
   {
      setDJ (value);
      return this;
   }

   public Card getDJ ()
   {
      return this.DJ;
   }

   /**
    * <pre>
    *           0..1     object_DK     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               DK
    * </pre>
    */
   public static final String PROPERTY_DK = "DK";

   @Property( name = PROPERTY_DK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DK;

   @Property( name = PROPERTY_DK )
   public boolean setDK (Card value)
   {
      boolean changed = false;

      if (this.DK != value)
      {
      
         Card oldValue = this.DK;
         this.DK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DK )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withDK (Card value)
   {
      setDK (value);
      return this;
   }

   public Card getDK ()
   {
      return this.DK;
   }

   /**
    * <pre>
    *           0..1     object_DQ     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               DQ
    * </pre>
    */
   public static final String PROPERTY_DQ = "DQ";

   @Property( name = PROPERTY_DQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DQ;

   @Property( name = PROPERTY_DQ )
   public boolean setDQ (Card value)
   {
      boolean changed = false;

      if (this.DQ != value)
      {
      
         Card oldValue = this.DQ;
         this.DQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DQ )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withDQ (Card value)
   {
      setDQ (value);
      return this;
   }

   public Card getDQ ()
   {
      return this.DQ;
   }

   /**
    * <pre>
    *           0..1     object_Eero     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Player
    *           test               Eero
    * </pre>
    */
   public static final String PROPERTY_EERO = "Eero";

   @Property( name = PROPERTY_EERO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Eero;

   @Property( name = PROPERTY_EERO )
   public boolean setEero (Player value)
   {
      boolean changed = false;

      if (this.Eero != value)
      {
      
         Player oldValue = this.Eero;
         this.Eero = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EERO )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withEero (Player value)
   {
      setEero (value);
      return this;
   }

   public Player getEero ()
   {
      return this.Eero;
   }

   /**
    * <pre>
    *           0..1     object_H10     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               H10
    * </pre>
    */
   public static final String PROPERTY_H10 = "H10";

   @Property( name = PROPERTY_H10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H10;

   @Property( name = PROPERTY_H10 )
   public boolean setH10 (Card value)
   {
      boolean changed = false;

      if (this.H10 != value)
      {
      
         Card oldValue = this.H10;
         this.H10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H10 )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withH10 (Card value)
   {
      setH10 (value);
      return this;
   }

   public Card getH10 ()
   {
      return this.H10;
   }

   /**
    * <pre>
    *           0..1     object_H7     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               H7
    * </pre>
    */
   public static final String PROPERTY_H7 = "H7";

   @Property( name = PROPERTY_H7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H7;

   @Property( name = PROPERTY_H7 )
   public boolean setH7 (Card value)
   {
      boolean changed = false;

      if (this.H7 != value)
      {
      
         Card oldValue = this.H7;
         this.H7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H7 )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withH7 (Card value)
   {
      setH7 (value);
      return this;
   }

   public Card getH7 ()
   {
      return this.H7;
   }

   /**
    * <pre>
    *           0..1     object_HA     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               HA
    * </pre>
    */
   public static final String PROPERTY_HA = "HA";

   @Property( name = PROPERTY_HA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HA;

   @Property( name = PROPERTY_HA )
   public boolean setHA (Card value)
   {
      boolean changed = false;

      if (this.HA != value)
      {
      
         Card oldValue = this.HA;
         this.HA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HA )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withHA (Card value)
   {
      setHA (value);
      return this;
   }

   public Card getHA ()
   {
      return this.HA;
   }

   /**
    * <pre>
    *           0..1     object_HK     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               HK
    * </pre>
    */
   public static final String PROPERTY_HK = "HK";

   @Property( name = PROPERTY_HK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HK;

   @Property( name = PROPERTY_HK )
   public boolean setHK (Card value)
   {
      boolean changed = false;

      if (this.HK != value)
      {
      
         Card oldValue = this.HK;
         this.HK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HK )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withHK (Card value)
   {
      setHK (value);
      return this;
   }

   public Card getHK ()
   {
      return this.HK;
   }

   /**
    * <pre>
    *           0..1     object_HQ     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Card
    *           test               HQ
    * </pre>
    */
   public static final String PROPERTY_HQ = "HQ";

   @Property( name = PROPERTY_HQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HQ;

   @Property( name = PROPERTY_HQ )
   public boolean setHQ (Card value)
   {
      boolean changed = false;

      if (this.HQ != value)
      {
      
         Card oldValue = this.HQ;
         this.HQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HQ )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withHQ (Card value)
   {
      setHQ (value);
      return this;
   }

   public Card getHQ ()
   {
      return this.HQ;
   }

   /**
    * <pre>
    *           0..1     object_Open     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Deck
    *           test               Open
    * </pre>
    */
   public static final String PROPERTY_OPEN = "Open";

   @Property( name = PROPERTY_OPEN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck Open;

   @Property( name = PROPERTY_OPEN )
   public boolean setOpen (Deck value)
   {
      boolean changed = false;

      if (this.Open != value)
      {
      
         Deck oldValue = this.Open;
         this.Open = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withOpen (Deck value)
   {
      setOpen (value);
      return this;
   }

   public Deck getOpen ()
   {
      return this.Open;
   }

   /**
    * <pre>
    *           0..1     object_Ulno     0..1
    * UulnoPlays7ForcingArtjomDraw2CardsTest ------------------------> Player
    *           test               Ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "Ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.Ulno != value)
      {
      
         Player oldValue = this.Ulno;
         this.Ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public UulnoPlays7ForcingArtjomDraw2CardsTest withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.Ulno;
   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player Ulno = null;
      Card CK = null;
      Card H7 = null;
      Turn CurrentTurn = null;
      Player Artjom = null;
      Player Eero = null;
      Card DJ = null;
      Card HK = null;
      Card HQ = null;
      Deck Open = null;
      Card HA = null;
      Deck Closed = null;
      Card D9 = null;
      Card C9 = null;
      Card H10 = null;
      Card DK = null;
      Card DQ = null;
      Card D10 = null;

      // // start situation: 
      // story pattern pre-condition
      try 
      {
         fujaba__Success = false; 

         // create object Ulno
         Ulno = new Player ( );

         // create object CK
         CK = new Card ( );

         // create object H7
         H7 = new Card ( );

         // create object CurrentTurn
         CurrentTurn = new Turn ( );

         // create object Artjom
         Artjom = new Player ( );

         // create object Eero
         Eero = new Player ( );

         // create object DJ
         DJ = new Card ( );

         // create object HK
         HK = new Card ( );

         // create object HQ
         HQ = new Card ( );

         // create object Open
         Open = new Deck ( );

         // create object HA
         HA = new Card ( );

         // create object Closed
         Closed = new Deck ( );

         // create object D9
         D9 = new Card ( );

         // create object C9
         C9 = new Card ( );

         // create object H10
         H10 = new Card ( );

         // create object DK
         DK = new Card ( );

         // create object DQ
         DQ = new Card ( );

         // create object D10
         D10 = new Card ( );

         // create link has from CK to Ulno
         CK.setPlayer (Ulno);

         // create link has from H7 to Ulno
         H7.setPlayer (Ulno);

         // create link has from CurrentTurn to Ulno
         CurrentTurn.setPlayer (Ulno);

         // create link right of from Artjom to Ulno
         Artjom.setPlayer (Ulno);

         // create link right of from Eero to Ulno
         Eero.setPlayer (Ulno);

         // create link object_Ulno from this to Ulno
         this.setUlno (Ulno);

         // create link has from DJ to Artjom
         DJ.setPlayer (Artjom);

         // create link right of from Eero to Artjom
         Eero.setPlayer (Artjom);

         // create link object_Artjom from this to Artjom
         this.setArtjom (Artjom);

         // create link has from HK to Eero
         HK.setPlayer (Eero);

         // create link has from HQ to Eero
         HQ.setPlayer (Eero);

         // create link object_Eero from this to Eero
         this.setEero (Eero);

         // create link object_HK from this to HK
         this.setHK (HK);

         // create link object_HQ from this to HQ
         this.setHQ (HQ);

         // create link object_DJ from this to DJ
         this.setDJ (DJ);

         // create link object_H7 from this to H7
         this.setH7 (H7);

         // create link object_CK from this to CK
         this.setCK (CK);

         // create link object_CurrentTurn from this to CurrentTurn
         this.setCurrentTurn (CurrentTurn);

         // create link on top from HA to Open
         HA.setDeck (Open);

         // create link object_Open from this to Open
         this.setOpen (Open);

         // create link on top from D9 to Closed
         D9.setDeck (Closed);

         // create link object_Closed from this to Closed
         this.setClosed (Closed);

         // create link object_HA from this to HA
         this.setHA (HA);

         // create link on top of from H10 to C9
         H10.setCard (C9);

         // create link object_C9 from this to C9
         this.setC9 (C9);

         // create link on top of from DK to H10
         DK.setCard (H10);

         // create link object_H10 from this to H10
         this.setH10 (H10);

         // create link on top of from DQ to DK
         DQ.setCard (DK);

         // create link object_DK from this to DK
         this.setDK (DK);

         // create link on top of from D10 to DQ
         D10.setCard (DQ);

         // create link object_DQ from this to DQ
         this.setDQ (DQ);

         // create link on top of from D9 to D10
         D9.setCard (D10);

         // create link object_D10 from this to D10
         this.setD10 (D10);

         // create link object_D9 from this to D9
         this.setD9 (D9);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testUulnoPlays7ForcingArtjomDraw2Cards ()
   {
      boolean fujaba__Success = false;

      // assert result situation
   }

   public void removeYou()
   {
      this.setArtjom (null);
      this.setC9 (null);
      this.setCK (null);
      this.setClosed (null);
      this.setCurrentTurn (null);
      this.setD10 (null);
      this.setD9 (null);
      this.setDJ (null);
      this.setDK (null);
      this.setDQ (null);
      this.setEero (null);
      this.setH10 (null);
      this.setH7 (null);
      this.setHA (null);
      this.setHK (null);
      this.setHQ (null);
      this.setOpen (null);
      this.setUlno (null);
   }
}


