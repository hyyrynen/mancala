/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;


public class ArtjomPlaysAn8AndEeroSkipsATurnTest extends TestCase
{



   /**
    * <pre>
    *           0..1     object_Artjom     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Player
    *           test               Artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "Artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.Artjom != value)
      {
      
         Player oldValue = this.Artjom;
         this.Artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.Artjom;
   }

   /**
    * <pre>
    *           0..1     object_C7     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               C7
    * </pre>
    */
   public static final String PROPERTY_C7 = "C7";

   @Property( name = PROPERTY_C7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C7;

   @Property( name = PROPERTY_C7 )
   public boolean setC7 (Card value)
   {
      boolean changed = false;

      if (this.C7 != value)
      {
      
         Card oldValue = this.C7;
         this.C7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C7 )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withC7 (Card value)
   {
      setC7 (value);
      return this;
   }

   public Card getC7 ()
   {
      return this.C7;
   }

   /**
    * <pre>
    *           0..1     object_C9     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               C9
    * </pre>
    */
   public static final String PROPERTY_C9 = "C9";

   @Property( name = PROPERTY_C9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C9;

   @Property( name = PROPERTY_C9 )
   public boolean setC9 (Card value)
   {
      boolean changed = false;

      if (this.C9 != value)
      {
      
         Card oldValue = this.C9;
         this.C9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C9 )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withC9 (Card value)
   {
      setC9 (value);
      return this;
   }

   public Card getC9 ()
   {
      return this.C9;
   }

   /**
    * <pre>
    *           0..1     object_CurrentTurn     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Turn
    *           test               CurrentTurn
    * </pre>
    */
   public static final String PROPERTY_CURRENT_TURN = "CurrentTurn";

   @Property( name = PROPERTY_CURRENT_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn CurrentTurn;

   @Property( name = PROPERTY_CURRENT_TURN )
   public boolean setCurrentTurn (Turn value)
   {
      boolean changed = false;

      if (this.CurrentTurn != value)
      {
      
         Turn oldValue = this.CurrentTurn;
         this.CurrentTurn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CURRENT_TURN )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withCurrentTurn (Turn value)
   {
      setCurrentTurn (value);
      return this;
   }

   public Turn getCurrentTurn ()
   {
      return this.CurrentTurn;
   }

   /**
    * <pre>
    *           0..1     object_DJ     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               DJ
    * </pre>
    */
   public static final String PROPERTY_DJ = "DJ";

   @Property( name = PROPERTY_DJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DJ;

   @Property( name = PROPERTY_DJ )
   public boolean setDJ (Card value)
   {
      boolean changed = false;

      if (this.DJ != value)
      {
      
         Card oldValue = this.DJ;
         this.DJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DJ )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withDJ (Card value)
   {
      setDJ (value);
      return this;
   }

   public Card getDJ ()
   {
      return this.DJ;
   }

   /**
    * <pre>
    *           0..1     object_DK     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               DK
    * </pre>
    */
   public static final String PROPERTY_DK = "DK";

   @Property( name = PROPERTY_DK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DK;

   @Property( name = PROPERTY_DK )
   public boolean setDK (Card value)
   {
      boolean changed = false;

      if (this.DK != value)
      {
      
         Card oldValue = this.DK;
         this.DK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DK )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withDK (Card value)
   {
      setDK (value);
      return this;
   }

   public Card getDK ()
   {
      return this.DK;
   }

   /**
    * <pre>
    *           0..1     object_Deck     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Deck
    *           test               Deck
    * </pre>
    */
   public static final String PROPERTY_DECK = "Deck";

   @Property( name = PROPERTY_DECK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck Deck;

   @Property( name = PROPERTY_DECK )
   public boolean setDeck (Deck value)
   {
      boolean changed = false;

      if (this.Deck != value)
      {
      
         Deck oldValue = this.Deck;
         this.Deck = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DECK )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withDeck (Deck value)
   {
      setDeck (value);
      return this;
   }

   public Deck getDeck ()
   {
      return this.Deck;
   }

   /**
    * <pre>
    *           0..1     object_Eero     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Player
    *           test               Eero
    * </pre>
    */
   public static final String PROPERTY_EERO = "Eero";

   @Property( name = PROPERTY_EERO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Eero;

   @Property( name = PROPERTY_EERO )
   public boolean setEero (Player value)
   {
      boolean changed = false;

      if (this.Eero != value)
      {
      
         Player oldValue = this.Eero;
         this.Eero = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EERO )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withEero (Player value)
   {
      setEero (value);
      return this;
   }

   public Player getEero ()
   {
      return this.Eero;
   }

   /**
    * <pre>
    *           0..1     object_H10     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               H10
    * </pre>
    */
   public static final String PROPERTY_H10 = "H10";

   @Property( name = PROPERTY_H10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H10;

   @Property( name = PROPERTY_H10 )
   public boolean setH10 (Card value)
   {
      boolean changed = false;

      if (this.H10 != value)
      {
      
         Card oldValue = this.H10;
         this.H10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H10 )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withH10 (Card value)
   {
      setH10 (value);
      return this;
   }

   public Card getH10 ()
   {
      return this.H10;
   }

   /**
    * <pre>
    *           0..1     object_H7     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               H7
    * </pre>
    */
   public static final String PROPERTY_H7 = "H7";

   @Property( name = PROPERTY_H7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H7;

   @Property( name = PROPERTY_H7 )
   public boolean setH7 (Card value)
   {
      boolean changed = false;

      if (this.H7 != value)
      {
      
         Card oldValue = this.H7;
         this.H7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H7 )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withH7 (Card value)
   {
      setH7 (value);
      return this;
   }

   public Card getH7 ()
   {
      return this.H7;
   }

   /**
    * <pre>
    *           0..1     object_H8     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               H8
    * </pre>
    */
   public static final String PROPERTY_H8 = "H8";

   @Property( name = PROPERTY_H8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H8;

   @Property( name = PROPERTY_H8 )
   public boolean setH8 (Card value)
   {
      boolean changed = false;

      if (this.H8 != value)
      {
      
         Card oldValue = this.H8;
         this.H8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H8 )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withH8 (Card value)
   {
      setH8 (value);
      return this;
   }

   public Card getH8 ()
   {
      return this.H8;
   }

   /**
    * <pre>
    *           0..1     object_HJ     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               HJ
    * </pre>
    */
   public static final String PROPERTY_HJ = "HJ";

   @Property( name = PROPERTY_HJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HJ;

   @Property( name = PROPERTY_HJ )
   public boolean setHJ (Card value)
   {
      boolean changed = false;

      if (this.HJ != value)
      {
      
         Card oldValue = this.HJ;
         this.HJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HJ )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withHJ (Card value)
   {
      setHJ (value);
      return this;
   }

   public Card getHJ ()
   {
      return this.HJ;
   }

   /**
    * <pre>
    *           0..1     object_HK     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               HK
    * </pre>
    */
   public static final String PROPERTY_HK = "HK";

   @Property( name = PROPERTY_HK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HK;

   @Property( name = PROPERTY_HK )
   public boolean setHK (Card value)
   {
      boolean changed = false;

      if (this.HK != value)
      {
      
         Card oldValue = this.HK;
         this.HK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HK )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withHK (Card value)
   {
      setHK (value);
      return this;
   }

   public Card getHK ()
   {
      return this.HK;
   }

   /**
    * <pre>
    *           0..1     object_HQ     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Card
    *           test               HQ
    * </pre>
    */
   public static final String PROPERTY_HQ = "HQ";

   @Property( name = PROPERTY_HQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HQ;

   @Property( name = PROPERTY_HQ )
   public boolean setHQ (Card value)
   {
      boolean changed = false;

      if (this.HQ != value)
      {
      
         Card oldValue = this.HQ;
         this.HQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HQ )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withHQ (Card value)
   {
      setHQ (value);
      return this;
   }

   public Card getHQ ()
   {
      return this.HQ;
   }

   /**
    * <pre>
    *           0..1     object_Open_deck     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Deck
    *           test               Open_deck
    * </pre>
    */
   public static final String PROPERTY_OPEN_DECK = "Open_deck";

   @Property( name = PROPERTY_OPEN_DECK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck Open_deck;

   @Property( name = PROPERTY_OPEN_DECK )
   public boolean setOpen_deck (Deck value)
   {
      boolean changed = false;

      if (this.Open_deck != value)
      {
      
         Deck oldValue = this.Open_deck;
         this.Open_deck = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN_DECK )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withOpen_deck (Deck value)
   {
      setOpen_deck (value);
      return this;
   }

   public Deck getOpen_deck ()
   {
      return this.Open_deck;
   }

   /**
    * <pre>
    *           0..1     object_Ulno     0..1
    * ArtjomPlaysAn8AndEeroSkipsATurnTest ------------------------> Player
    *           test               Ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "Ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.Ulno != value)
      {
      
         Player oldValue = this.Ulno;
         this.Ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public ArtjomPlaysAn8AndEeroSkipsATurnTest withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.Ulno;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterArtjomToC7 = null;
      Card C7 = null;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object Artjom is really bound
         JavaSDM.ensure ( Artjom != null, "check object Artjom is really bound" );
         // check object C9 is really bound
         JavaSDM.ensure ( C9 != null, "check object C9 is really bound" );
         // check object CurrentTurn is really bound
         JavaSDM.ensure ( CurrentTurn != null, "check object CurrentTurn is really bound" );
         // check object DJ is really bound
         JavaSDM.ensure ( DJ != null, "check object DJ is really bound" );
         // check object DK is really bound
         JavaSDM.ensure ( DK != null, "check object DK is really bound" );
         // check object Deck is really bound
         JavaSDM.ensure ( Deck != null, "check object Deck is really bound" );
         // check object Eero is really bound
         JavaSDM.ensure ( Eero != null, "check object Eero is really bound" );
         // check object H10 is really bound
         JavaSDM.ensure ( H10 != null, "check object H10 is really bound" );
         // check object H8 is really bound
         JavaSDM.ensure ( H8 != null, "check object H8 is really bound" );
         // check object HJ is really bound
         JavaSDM.ensure ( HJ != null, "check object HJ is really bound" );
         // check object HK is really bound
         JavaSDM.ensure ( HK != null, "check object HK is really bound" );
         // check object HQ is really bound
         JavaSDM.ensure ( HQ != null, "check object HQ is really bound" );
         // check object Open_deck is really bound
         JavaSDM.ensure ( Open_deck != null, "check object Open_deck is really bound" );
         // check object Ulno is really bound
         JavaSDM.ensure ( Ulno != null, "check object Ulno is really bound" );
         // check isomorphic binding between objects Eero and Artjom
         JavaSDM.ensure ( !Eero.equals (Artjom), "check isomorphic binding between objects Eero and Artjom" );

         // check isomorphic binding between objects Ulno and Artjom
         JavaSDM.ensure ( !Ulno.equals (Artjom), "check isomorphic binding between objects Ulno and Artjom" );

         // check isomorphic binding between objects DJ and C9
         JavaSDM.ensure ( !DJ.equals (C9), "check isomorphic binding between objects DJ and C9" );

         // check isomorphic binding between objects DK and C9
         JavaSDM.ensure ( !DK.equals (C9), "check isomorphic binding between objects DK and C9" );

         // check isomorphic binding between objects H10 and C9
         JavaSDM.ensure ( !H10.equals (C9), "check isomorphic binding between objects H10 and C9" );

         // check isomorphic binding between objects H8 and C9
         JavaSDM.ensure ( !H8.equals (C9), "check isomorphic binding between objects H8 and C9" );

         // check isomorphic binding between objects HJ and C9
         JavaSDM.ensure ( !HJ.equals (C9), "check isomorphic binding between objects HJ and C9" );

         // check isomorphic binding between objects HK and C9
         JavaSDM.ensure ( !HK.equals (C9), "check isomorphic binding between objects HK and C9" );

         // check isomorphic binding between objects HQ and C9
         JavaSDM.ensure ( !HQ.equals (C9), "check isomorphic binding between objects HQ and C9" );

         // check isomorphic binding between objects DK and DJ
         JavaSDM.ensure ( !DK.equals (DJ), "check isomorphic binding between objects DK and DJ" );

         // check isomorphic binding between objects H10 and DJ
         JavaSDM.ensure ( !H10.equals (DJ), "check isomorphic binding between objects H10 and DJ" );

         // check isomorphic binding between objects H8 and DJ
         JavaSDM.ensure ( !H8.equals (DJ), "check isomorphic binding between objects H8 and DJ" );

         // check isomorphic binding between objects HJ and DJ
         JavaSDM.ensure ( !HJ.equals (DJ), "check isomorphic binding between objects HJ and DJ" );

         // check isomorphic binding between objects HK and DJ
         JavaSDM.ensure ( !HK.equals (DJ), "check isomorphic binding between objects HK and DJ" );

         // check isomorphic binding between objects HQ and DJ
         JavaSDM.ensure ( !HQ.equals (DJ), "check isomorphic binding between objects HQ and DJ" );

         // check isomorphic binding between objects H10 and DK
         JavaSDM.ensure ( !H10.equals (DK), "check isomorphic binding between objects H10 and DK" );

         // check isomorphic binding between objects H8 and DK
         JavaSDM.ensure ( !H8.equals (DK), "check isomorphic binding between objects H8 and DK" );

         // check isomorphic binding between objects HJ and DK
         JavaSDM.ensure ( !HJ.equals (DK), "check isomorphic binding between objects HJ and DK" );

         // check isomorphic binding between objects HK and DK
         JavaSDM.ensure ( !HK.equals (DK), "check isomorphic binding between objects HK and DK" );

         // check isomorphic binding between objects HQ and DK
         JavaSDM.ensure ( !HQ.equals (DK), "check isomorphic binding between objects HQ and DK" );

         // check isomorphic binding between objects Open_deck and Deck
         JavaSDM.ensure ( !Open_deck.equals (Deck), "check isomorphic binding between objects Open_deck and Deck" );

         // check isomorphic binding between objects Ulno and Eero
         JavaSDM.ensure ( !Ulno.equals (Eero), "check isomorphic binding between objects Ulno and Eero" );

         // check isomorphic binding between objects H8 and H10
         JavaSDM.ensure ( !H8.equals (H10), "check isomorphic binding between objects H8 and H10" );

         // check isomorphic binding between objects HJ and H10
         JavaSDM.ensure ( !HJ.equals (H10), "check isomorphic binding between objects HJ and H10" );

         // check isomorphic binding between objects HK and H10
         JavaSDM.ensure ( !HK.equals (H10), "check isomorphic binding between objects HK and H10" );

         // check isomorphic binding between objects HQ and H10
         JavaSDM.ensure ( !HQ.equals (H10), "check isomorphic binding between objects HQ and H10" );

         // check isomorphic binding between objects HJ and H8
         JavaSDM.ensure ( !HJ.equals (H8), "check isomorphic binding between objects HJ and H8" );

         // check isomorphic binding between objects HK and H8
         JavaSDM.ensure ( !HK.equals (H8), "check isomorphic binding between objects HK and H8" );

         // check isomorphic binding between objects HQ and H8
         JavaSDM.ensure ( !HQ.equals (H8), "check isomorphic binding between objects HQ and H8" );

         // check isomorphic binding between objects HK and HJ
         JavaSDM.ensure ( !HK.equals (HJ), "check isomorphic binding between objects HK and HJ" );

         // check isomorphic binding between objects HQ and HJ
         JavaSDM.ensure ( !HQ.equals (HJ), "check isomorphic binding between objects HQ and HJ" );

         // check isomorphic binding between objects HQ and HK
         JavaSDM.ensure ( !HQ.equals (HK), "check isomorphic binding between objects HQ and HK" );

         // check link has from C9 to Eero
         JavaSDM.ensure (Eero.equals (C9.getPlayer ()), "check link has from C9 to Eero");

         // check link has from DJ to Eero
         JavaSDM.ensure (Eero.equals (DJ.getPlayer ()), "check link has from DJ to Eero");

         // check link has from CurrentTurn to Ulno
         JavaSDM.ensure (Ulno.equals (CurrentTurn.getPlayer ()), "check link has from CurrentTurn to Ulno");

         // check link has from H10 to Ulno
         JavaSDM.ensure (Ulno.equals (H10.getPlayer ()), "check link has from H10 to Ulno");

         // check link on top of from HK to DK
         JavaSDM.ensure (DK.equals (HK.getCard ()), "check link on top of from HK to DK");

         // check link on top of from HJ to H8
         JavaSDM.ensure (H8.equals (HJ.getCard ()), "check link on top of from HJ to H8");

         // check link on top of from HQ to HK
         JavaSDM.ensure (HK.equals (HQ.getCard ()), "check link on top of from HQ to HK");

         // check link on top from HJ to Open_deck
         JavaSDM.ensure (Open_deck.equals (HJ.getDeck ()), "check link on top from HJ to Open_deck");

         // check link on top from HQ to Deck
         JavaSDM.ensure (Deck.equals (HQ.getDeck ()), "check link on top from HQ to Deck");

         // check link right of from Eero to Artjom
         JavaSDM.ensure (Artjom.equals (Eero.getPlayer ()), "check link right of from Eero to Artjom");

         // check link right of from Eero to Ulno
         JavaSDM.ensure (Ulno.equals (Eero.getPlayer ()), "check link right of from Eero to Ulno");

         // check link right of from Ulno to Artjom
         JavaSDM.ensure (Artjom.equals (Ulno.getPlayer ()), "check link right of from Ulno to Artjom");

         // iterate to-many link has from Artjom to C7
         fujaba__Success = false;
         fujaba__IterArtjomToC7 = Artjom.iteratorOfCard ();

         List<JavaSDMException> causesArtjomToC7 = new ArrayList<JavaSDMException>();
         while ( !(fujaba__Success) && fujaba__IterArtjomToC7.hasNext () )
         {
            try
            {
               C7 = (Card) fujaba__IterArtjomToC7.next ();

               // check object C7 is really bound
               JavaSDM.ensure ( C7 != null, "check object C7 is really bound" );
               // check isomorphic binding between objects C9 and C7
               JavaSDM.ensure ( !C9.equals (C7), "check isomorphic binding between objects C9 and C7" );

               // check isomorphic binding between objects DJ and C7
               JavaSDM.ensure ( !DJ.equals (C7), "check isomorphic binding between objects DJ and C7" );

               // check isomorphic binding between objects DK and C7
               JavaSDM.ensure ( !DK.equals (C7), "check isomorphic binding between objects DK and C7" );

               // check isomorphic binding between objects H10 and C7
               JavaSDM.ensure ( !H10.equals (C7), "check isomorphic binding between objects H10 and C7" );

               // check isomorphic binding between objects H8 and C7
               JavaSDM.ensure ( !H8.equals (C7), "check isomorphic binding between objects H8 and C7" );

               // check isomorphic binding between objects HJ and C7
               JavaSDM.ensure ( !HJ.equals (C7), "check isomorphic binding between objects HJ and C7" );

               // check isomorphic binding between objects HK and C7
               JavaSDM.ensure ( !HK.equals (C7), "check isomorphic binding between objects HK and C7" );

               // check isomorphic binding between objects HQ and C7
               JavaSDM.ensure ( !HQ.equals (C7), "check isomorphic binding between objects HQ and C7" );


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               causesArtjomToC7.add (fujaba__InternalException);
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success, "iterate to-many link has from Artjom to C7", causesArtjomToC7);
         // create link object_C7 from this to C7
         this.setC7 (C7);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player Eero = null;
      Player Ulno = null;
      Card C9 = null;
      Card DJ = null;
      Player Artjom = null;
      Card H10 = null;
      Card H8 = null;
      Card H7 = null;
      Turn CurrentTurn = null;
      Deck Deck = null;
      Card HQ = null;
      Deck Open_deck = null;
      Card HJ = null;
      Card DK = null;
      Card HK = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object Eero
         Eero = new Player ( );

         // create object Ulno
         Ulno = new Player ( );

         // create object C9
         C9 = new Card ( );

         // create object DJ
         DJ = new Card ( );

         // create object Artjom
         Artjom = new Player ( );

         // create object H10
         H10 = new Card ( );

         // create object H8
         H8 = new Card ( );

         // create object H7
         H7 = new Card ( );

         // create object CurrentTurn
         CurrentTurn = new Turn ( );

         // create object Deck
         Deck = new Deck ( );

         // create object HQ
         HQ = new Card ( );

         // create object Open_deck
         Open_deck = new Deck ( );

         // create object HJ
         HJ = new Card ( );

         // create object DK
         DK = new Card ( );

         // create object HK
         HK = new Card ( );

         // create link right of from Ulno to Eero
         Ulno.setPlayer (Eero);

         // create link has from C9 to Eero
         C9.setPlayer (Eero);

         // create link has from DJ to Eero
         DJ.setPlayer (Eero);

         // create link right of from Artjom to Eero
         Artjom.setPlayer (Eero);

         // create link object_Eero from this to Eero
         this.setEero (Eero);

         // create link right of from Artjom to Ulno
         Artjom.setPlayer (Ulno);

         // create link has from H10 to Ulno
         H10.setPlayer (Ulno);

         // create link object_Ulno from this to Ulno
         this.setUlno (Ulno);

         // create link has from H8 to Artjom
         H8.setPlayer (Artjom);

         // create link has from H7 to Artjom
         H7.setPlayer (Artjom);

         // create link has from CurrentTurn to Artjom
         CurrentTurn.setPlayer (Artjom);

         // create link object_Artjom from this to Artjom
         this.setArtjom (Artjom);

         // create link object_H8 from this to H8
         this.setH8 (H8);

         // create link object_H7 from this to H7
         this.setH7 (H7);

         // create link object_C9 from this to C9
         this.setC9 (C9);

         // create link object_DJ from this to DJ
         this.setDJ (DJ);

         // create link object_H10 from this to H10
         this.setH10 (H10);

         // create link on top from HQ to Deck
         HQ.setDeck (Deck);

         // create link object_Deck from this to Deck
         this.setDeck (Deck);

         // create link on top from HJ to Open_deck
         HJ.setDeck (Open_deck);

         // create link object_Open_deck from this to Open_deck
         this.setOpen_deck (Open_deck);

         // create link object_HJ from this to HJ
         this.setHJ (HJ);

         // create link on top of from HK to DK
         HK.setCard (DK);

         // create link object_DK from this to DK
         this.setDK (DK);

         // create link on top of from HQ to HK
         HQ.setCard (HK);

         // create link object_HK from this to HK
         this.setHK (HK);

         // create link object_HQ from this to HQ
         this.setHQ (HQ);

         // create link object_CurrentTurn from this to CurrentTurn
         this.setCurrentTurn (CurrentTurn);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testArtjomPlaysAn8AndEeroSkipsATurn ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.setArtjom (null);
      this.setC7 (null);
      this.setC9 (null);
      this.setCurrentTurn (null);
      this.setDJ (null);
      this.setDK (null);
      this.setDeck (null);
      this.setEero (null);
      this.setH10 (null);
      this.setH7 (null);
      this.setH8 (null);
      this.setHJ (null);
      this.setHK (null);
      this.setHQ (null);
      this.setOpen_deck (null);
      this.setUlno (null);
   }
}


