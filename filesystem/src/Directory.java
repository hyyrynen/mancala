/*
 * generated by Fujaba - CodeGen2
 */
import java.io.File;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import java.util.ArrayList;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Directory extends AbstractFile
{



   public  Directory (String name )
   {
      boolean fujaba__Success = false;
      File f = null;
      ArrayList fileArray = null;
      Directory newDir = null;
      RegularFile newFile = null;
      File f2 = null;

      // story pattern createFile
      try 
      {
         fujaba__Success = false; 

         // create object f
         f = new java.io.File(name);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      // story pattern linkFile
      try 
      {
         fujaba__Success = false; 

         // check object f is really bound
         JavaSDM.ensure ( f != null );
         // constraint f.isDirectory()
         JavaSDM.ensure ( f.isDirectory() );
         // create link file from this to f
         this.setIoFile (f);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      // story pattern createFileArray
      try 
      {
         fujaba__Success = false; 

         // check object f is really bound
         JavaSDM.ensure ( f != null );
         // create object fileArray
         fileArray = new ArrayList(java.util.Arrays.asList(f.listFiles()));

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern iterateEachFile in FileArray
      try 
      {
         fujaba__Success = false; 

         // check object fileArray is really bound
         JavaSDM.ensure ( fileArray != null );
         // search to-one link iterator from fileArray to f2
         f2 = fileArray.getFile ();

         // check object f2 is really bound
         JavaSDM.ensure ( f2 != null );

         if ( f.isDirectory() )
         {
            // story pattern createDirectory
            try 
            {
               fujaba__Success = false; 

               // check object f2 is really bound
               JavaSDM.ensure ( f2 != null );
               // create object newDir
               newDir = new Directory(f2.getAbsolutePath());

               // create link has from newDir to this
               newDir.setDirectory (this);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }
         else
         {
            // story pattern Create a regularfile for each one
            try 
            {
               fujaba__Success = false; 

               // check object f2 is really bound
               JavaSDM.ensure ( f2 != null );
               // create object newFile
               newFile = new RegularFile(f2.getAbsolutePath());

               // create link has from newFile to this
               newFile.setDirectory (this);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           1     has     0..*
    * Directory ------------------------- AbstractFile
    *           directory               abstractFile
    * </pre>
    */
   public static final String PROPERTY_ABSTRACT_FILE = "abstractFile";

   @Property( name = PROPERTY_ABSTRACT_FILE, partner = AbstractFile.PROPERTY_DIRECTORY, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.COMPOSITION)
   private FHashSet<AbstractFile> abstractFile;

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public Set<? extends AbstractFile> getAbstractFile()
   {
      return ((this.abstractFile == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.abstractFile));
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public boolean addToAbstractFile (AbstractFile value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.abstractFile == null)
         {
            this.abstractFile = new FHashSet<AbstractFile> ();

         }
      
         changed = this.abstractFile.add (value);
         if (changed)
         {
            value.setDirectory (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public Directory withAbstractFile (AbstractFile value)
   {
      addToAbstractFile (value);
      return this;
   }

   public Directory withoutAbstractFile (AbstractFile value)
   {
      removeFromAbstractFile (value);
      return this;
   }


   public boolean removeFromAbstractFile (AbstractFile value)
   {
      boolean changed = false;

      if ((this.abstractFile != null) && (value != null))
      {
      
         changed = this.abstractFile.remove (value);
         if (changed)
         {
            value.setDirectory (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public void removeAllFromAbstractFile (){
   
      AbstractFile tmpValue;
      Iterator<? extends AbstractFile> iter = this.iteratorOfAbstractFile ();
      while (iter.hasNext ())
      {
         tmpValue = (AbstractFile) iter.next ();
         this.removeFromAbstractFile (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public boolean hasInAbstractFile (AbstractFile value)
   {
      return ((this.abstractFile != null) &&
              (value != null) &&
              this.abstractFile.contains (value));
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public Iterator<? extends AbstractFile> iteratorOfAbstractFile ()
   {
      return ((this.abstractFile == null)
              ? FEmptyIterator.<AbstractFile>get ()
              : this.abstractFile.iterator ());
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public int sizeOfAbstractFile ()
   {
      return ((this.abstractFile == null)
              ? 0
              : this.abstractFile.size ());
   }

   public Visitor accept (Visitor visitor )
   {
      boolean fujaba__Success = false;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object visitor is really bound
         JavaSDM.ensure ( visitor != null );
         // collabStat call
         visitor.visitor.visit(this);
         // collabStat call
         for ( int i = 0;i <= this.childNodes.length;++i )
         {
         this.childNodes[i].accept(visitor);
         }
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..n     root     0..1
    * Directory ------------------------- Root
    *           abstractFile               root
    * </pre>
    */
   public static final String PROPERTY_ROOT = "root";

   @Property( name = PROPERTY_ROOT, partner = Root.PROPERTY_ABSTRACT_FILE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.PARENT)
   private Root root;

   @Property( name = PROPERTY_ROOT )
   public boolean setRoot (Root value)
   {
      boolean changed = false;

      if (this.root != value)
      {
      
         Root oldValue = this.root;
         Directory source = this;
         if (this.root != null)
         {
            this.root = null;
            oldValue.removeFromAbstractFile (this);
         }
         this.root = value;

         if (value != null)
         {
            value.addToAbstractFile (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ROOT )
   public Directory withRoot (Root value)
   {
      setRoot (value);
      return this;
   }

   public Root getRoot ()
   {
      return this.root;
   }

   public void removeYou()
   {
      for (Iterator iterAbstractFile = this.iteratorOfAbstractFile (); iterAbstractFile.hasNext ();)
      {
         ((AbstractFile)iterAbstractFile.next ()).removeYou ();
      }
      this.setRoot (null);
      super.removeYou ();
   }
}


